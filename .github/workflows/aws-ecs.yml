name: Deploy microservice to AWS ECS

on:
   push:
     branches:
       - main

env:
  AWS_REGION: us-east-1
  CONTAINER_NAME: test-service
  ECR_REGISTERY:
  ECR_REPO:
  ECS_CLUSTER:
  ECS_TD:
  ECS_SV:

defaults:
  run:
    shell: bash 

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{secrets.AWS_ACCESS_KEY_ID}} //NEED to SETUP
        aws-secret-access-key: ${{secrets.AWS_SECRET_ACCESS_KEY}}
        aws-region: ${{env.AWS_REGION}}

    - name: Login to AWS ECR
      id: login-ecr 
      uses: aws-actions/amazon-ecr-login@v1


    - name: Build, Tag and Push Image TO ECR
      id: build-Image
      env:
       ECR_REGISTERY ${{steps.login-ecr.outputs.registry}}
       IMAGE_TAG ${{github.sha}}
      run: | 
       docker build -t $ECR_REGISTERY/$ECR_REPO:$IMAGE_TAG -- build-arg NODE_ENV=production .
       docker push $ECR_REGISTERY/$ECR_REPO:$IMAGE_TAG
       echo "::set-output"


    - name: Fill Image ID in the ECS Client Task Definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ./task-definition.json
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ steps.build-image.outputs.image }}
    
    - name: Deploy ECS Task Definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SV }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: false
